package vistaControl;

import java.awt.event.KeyEvent;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modelo.Alumno;
import persistencia.AlumnoData;

/**
 *
 * @author Grupo 19 (Matias Correa, Valeria Muñoz, Evelyn Cetera)
 */
public class FormularioAlumnoView extends javax.swing.JInternalFrame {
    private boolean actualizando = false;
    private Alumno alum;
    private DefaultTableModel modelo = new DefaultTableModel();
    
    private AlumnoData alumData;

    public FormularioAlumnoView(AlumnoData aData) {
        initComponents();
        this.alumData = aData;
        limpiarCampos();
        deshabilitarBotones();
        cargarTabla();
    }
    private void limpiarCampos() {
        jtfID.setText("");
        jtfDNI.setText("");
        jtfNombre.setText("");
        jtfApellido.setText("");
        jdcCalendario.setDate(null);
        estados.clearSelection();
    }

    private void deshabilitarBotones() {
        jbBuscar.setEnabled(false);
        jbGuardar.setEnabled(false);
        jbBorrar.setEnabled(false);
        jbActualizar.setEnabled(false);
        jbLimpiar.setEnabled(false);

    }
    private void habilitarBotones(){
        jbBuscar.setEnabled(true);
        jbGuardar.setEnabled(true);
        jbBorrar.setEnabled(true);
        jbLimpiar.setEnabled(true);
    
    }

    private void validarLetras(char c, KeyEvent e) {
        if (Character.isDigit(c)) {
            JOptionPane.showMessageDialog(this, "No se permiten números en este campo", "Entrada inválida", JOptionPane.WARNING_MESSAGE);
            e.consume();
        }
    }

    private void validarNumeros(char c, KeyEvent e) {
        if (Character.isLetter(c)) {
            JOptionPane.showMessageDialog(this, "Campo de valores númericos", "Entrada inválida", JOptionPane.WARNING_MESSAGE);
            e.consume();
        }
    }
    public void actualizarEstado(boolean estado){
            jrbActivo.setSelected(estado);
            jrbInactivo.setSelected(!estado);
        
    }
    
    private String conversorEstado(boolean b){
        String a = "Activo";
        String i = "Inactivo";
        if(b == true){
           return a; 
        } else{
            return i;
        }
    }
    
    private void cargarTabla(){
        modelo.setRowCount(0);
        modelo.setColumnCount(0);
        modelo.fireTableDataChanged();
        
        modelo.addColumn("ID");
        modelo.addColumn("DNI");
        modelo.addColumn("Apellido");
        modelo.addColumn("Nombre");
        modelo.addColumn("Fecha Nacimiento");
        modelo.addColumn("Estado");
        
        List<Alumno> lista = alumData.listarAlumnos();
        
        for(Alumno aux : lista){
            
            modelo.addRow(new Object[]{ 
                aux.getIdAlumno(),
                aux.getDni(),
                aux.getApellido(),
                aux.getNombre(),
                aux.getFechaNacimiento(),
                conversorEstado(aux.getEstado()) 
            });
        }
        jtAlumnos.setModel(modelo);
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        estados = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jpFormulario = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jtfNombre = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jtfDNI = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jtfApellido = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jdcCalendario = new com.toedter.calendar.JDateChooser();
        jLabel6 = new javax.swing.JLabel();
        jrbActivo = new javax.swing.JRadioButton();
        jrbInactivo = new javax.swing.JRadioButton();
        jbGuardar = new javax.swing.JButton();
        jbBorrar = new javax.swing.JButton();
        jbActualizar = new javax.swing.JButton();
        jbLimpiar = new javax.swing.JButton();
        jbBuscar = new javax.swing.JButton();
        jtfID = new javax.swing.JTextField();
        jLabelID = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtAlumnos = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();

        setClosable(true);
        setMaximizable(true);
        setResizable(true);

        jLabel1.setFont(new java.awt.Font("Serif", 1, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Gestión de Alumnos");
        jLabel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel1.setFocusable(false);

        jLabel2.setFont(new java.awt.Font("Serif", 1, 14)); // NOI18N
        jLabel2.setText("Nombre:");

        jtfNombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtfNombreKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jtfNombreKeyTyped(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Serif", 1, 14)); // NOI18N
        jLabel3.setText("Apellido:");

        jtfDNI.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtfDNIKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jtfDNIKeyTyped(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Serif", 1, 14)); // NOI18N
        jLabel4.setText("DNI:");

        jtfApellido.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtfApellidoKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jtfApellidoKeyTyped(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Serif", 1, 14)); // NOI18N
        jLabel5.setText("Fecha de Nacimiento:");

        jdcCalendario.setMaxSelectableDate(new java.util.Date(1199156512000L));
        jdcCalendario.setMinSelectableDate(new java.util.Date(-1735670480000L));
        jdcCalendario.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jdcCalendarioPropertyChange(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Serif", 1, 14)); // NOI18N
        jLabel6.setText("Estado:");

        estados.add(jrbActivo);
        jrbActivo.setFont(new java.awt.Font("Serif", 1, 12)); // NOI18N
        jrbActivo.setText("Activo");
        jrbActivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbActivoActionPerformed(evt);
            }
        });

        estados.add(jrbInactivo);
        jrbInactivo.setFont(new java.awt.Font("Serif", 1, 12)); // NOI18N
        jrbInactivo.setText("Inactivo");
        jrbInactivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbInactivoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpFormularioLayout = new javax.swing.GroupLayout(jpFormulario);
        jpFormulario.setLayout(jpFormularioLayout);
        jpFormularioLayout.setHorizontalGroup(
            jpFormularioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpFormularioLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpFormularioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addGroup(jpFormularioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE))
                    .addComponent(jLabel6))
                .addGap(41, 41, 41)
                .addGroup(jpFormularioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jtfApellido, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtfNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtfDNI, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jpFormularioLayout.createSequentialGroup()
                        .addComponent(jrbActivo)
                        .addGap(36, 36, 36)
                        .addComponent(jrbInactivo))
                    .addComponent(jdcCalendario, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jpFormularioLayout.setVerticalGroup(
            jpFormularioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpFormularioLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jpFormularioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jtfDNI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(jpFormularioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jtfNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jpFormularioLayout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jpFormularioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jtfApellido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(jpFormularioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jdcCalendario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(jpFormularioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jrbActivo)
                    .addComponent(jrbInactivo))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jbGuardar.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jbGuardar.setText("Guardar");
        jbGuardar.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jbGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbGuardarActionPerformed(evt);
            }
        });

        jbBorrar.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jbBorrar.setText("Borrar");
        jbBorrar.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jbBorrar.setEnabled(false);
        jbBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBorrarActionPerformed(evt);
            }
        });

        jbActualizar.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jbActualizar.setText("Actualizar");
        jbActualizar.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jbActualizar.setEnabled(false);
        jbActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbActualizarActionPerformed(evt);
            }
        });

        jbLimpiar.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jbLimpiar.setText("Limpiar");
        jbLimpiar.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jbLimpiar.setEnabled(false);
        jbLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbLimpiarActionPerformed(evt);
            }
        });

        jbBuscar.setFont(new java.awt.Font("Serif", 1, 14)); // NOI18N
        jbBuscar.setText("Buscar");
        jbBuscar.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jbBuscar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBuscarActionPerformed(evt);
            }
        });

        jtfID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jtfIDKeyTyped(evt);
            }
        });

        jLabelID.setFont(new java.awt.Font("Serif", 1, 14)); // NOI18N
        jLabelID.setText("ID: ");

        jtAlumnos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "DNI", "NOMBRE", "APELLIDO", "FECHA NACIMIENTO", "ESTADO"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtAlumnos.setEnabled(false);
        jScrollPane1.setViewportView(jtAlumnos);

        jLabel7.setFont(new java.awt.Font("Serif", 1, 24)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Lista Alumnos");
        jLabel7.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jLabel7.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel7.setOpaque(true);
        jLabel7.setRequestFocusEnabled(false);
        jLabel7.setVerifyInputWhenFocusTarget(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelID, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(jtfID, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(54, 54, 54)
                        .addComponent(jbBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jpFormulario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jbActualizar, javax.swing.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE)
                    .addComponent(jbGuardar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbLimpiar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jbBorrar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(27, 27, 27))
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 646, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(24, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(179, 179, 179))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelID, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jtfID, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jbActualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(jbGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(jbLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(jbBorrar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jpFormulario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(66, 66, 66))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBuscarActionPerformed
        // TODO add your handling code here:
        int id = Integer.valueOf(jtfID.getText());
        alum = alumData.buscarAlumno(id);
        
        if (alum == null) {
            JOptionPane.showMessageDialog(this, "No se encontró ningun alumno con el ID: " + id);
            limpiarCampos();
            deshabilitarBotones();
            return;
        }
            jtfDNI.setText(alum.getDni() + "");
            jtfNombre.setText(alum.getNombre());
            jtfApellido.setText(alum.getApellido());
            jdcCalendario.setDate(java.sql.Date.valueOf(alum.getFechaNacimiento()));
            actualizarEstado(alum.getEstado());
            actualizando = true;
             habilitarBotones();
            jbGuardar.setEnabled(false);

    }//GEN-LAST:event_jbBuscarActionPerformed

    private void jbGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbGuardarActionPerformed
        // TODO add your handling code here
        if(jtfDNI.getText().length() < 5){
            JOptionPane.showMessageDialog(this, "El campo DNI requiere 5 dígitos" );
        } else if(jtfNombre.getText().length() < 3 ||
                jtfApellido.getText().length() < 3){
            JOptionPane.showMessageDialog(this, "Nombre y apellido deben tener al menos 3 caracteres.");
        }
        else{
            try {
                
                if (jtfDNI.getText().isEmpty() || jtfNombre.getText().isEmpty()
                        || jtfApellido.getText().isEmpty() || jdcCalendario.getDate() == null
                        || !jrbActivo.isSelected() && !jrbInactivo.isSelected()) {
                    JOptionPane.showMessageDialog(this, "Todos los campos son obligatorios", "WARNING", JOptionPane.WARNING_MESSAGE);
                    return;
                }

                int dni = Integer.valueOf(jtfDNI.getText());
                String nombre = jtfNombre.getText();
                String apellido = jtfApellido.getText();
                boolean estado = jrbActivo.isSelected();

                LocalDate fechaNac = jdcCalendario.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();

                Alumno alum = new Alumno(dni,apellido, nombre, fechaNac, estado);
                alumData.guardarAlumno(alum);

                if(alumData.guardarAlumno(alum)){
                    jtfID.setText(alum.getIdAlumno() + "");
                    JOptionPane.showMessageDialog(this, "Alumno guardado correctamente!");
                    limpiarCampos();
                    jbLimpiar.setEnabled(true);
                    cargarTabla();
                    deshabilitarBotones();
                }

            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "El campo DNI debe ser de valor númerico" + e.getMessage());
            }
        }
    }//GEN-LAST:event_jbGuardarActionPerformed

    private void jbActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbActualizarActionPerformed
        // TODO add your handling code here:                
        if(jtfDNI.getText().length() < 5){
            JOptionPane.showMessageDialog(this, "El campo DNI requiere 5 dígitos" );
        } else if(jtfNombre.getText().length() < 3 ||
                jtfApellido.getText().length() < 3){
            JOptionPane.showMessageDialog(this, "Nombre y apellido deben tener " 
                    + "al menos 3 caracteres.");
        }
        else{
            int id = Integer.valueOf(jtfID.getText());
            int dni = Integer.valueOf(jtfDNI.getText());
            String apellido = jtfApellido.getText();
            String nombre = jtfNombre.getText();

            LocalDate fechaNac = jdcCalendario.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            boolean estado;

            if(jrbActivo.isSelected()){
                estado = true;
            }else if(jrbInactivo.isSelected()){
                estado = false;
            } else{
                JOptionPane.showMessageDialog(this, "Debe seleccionar un estado.");
                return;
            }
            Alumno alum;
            int opcion = JOptionPane.showConfirmDialog(this, "¿Desea actualizar el alumno seleccionado? S/N", "Confirmation", JOptionPane.YES_NO_OPTION);
            if (opcion == JOptionPane.YES_OPTION) {

                alum = new Alumno(dni, nombre, apellido, fechaNac, estado);
                alum.setIdAlumno(id);

                alumData.actualizarAlumno(alum);
                limpiarCampos();
                actualizando = false;
                jbActualizar.setEnabled(false);
                cargarTabla();
                JOptionPane.showMessageDialog(this, "Actualizado correctamente.");
                deshabilitarBotones();
            }
        }
    }//GEN-LAST:event_jbActualizarActionPerformed

    private void jbBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBorrarActionPerformed
        // TODO add your handling code here:
        int id = Integer.valueOf(jtfID.getText());
        Alumno alum;
        int opcion = JOptionPane.showConfirmDialog(this, "¿Desea eliminar la materia seleccionada? S/N", "Confirmation", JOptionPane.YES_NO_OPTION);
        if (opcion == JOptionPane.YES_OPTION) {
            alum = new Alumno();
            alum.setIdAlumno(id);

            alumData.eliminarAlumno(alum);
            limpiarCampos();
            actualizando = false;
            cargarTabla();
            JOptionPane.showMessageDialog(this, "Alumno eliminado correctamente.");
            deshabilitarBotones();
        }
    }//GEN-LAST:event_jbBorrarActionPerformed

    private void jbLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbLimpiarActionPerformed
        // TODO add your handling code here:
        limpiarCampos();
        deshabilitarBotones();
        actualizando = false;
    }//GEN-LAST:event_jbLimpiarActionPerformed

    private void jtfNombreKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfNombreKeyReleased
        // TODO add your handling code here:
        String nombre = jtfNombre.getText();
        
        if(actualizando && alum .getNombre().equals(nombre)) {
            jbActualizar.setEnabled(false);
        }
        if(actualizando && !alum.getNombre().equals(nombre)){
            jbActualizar.setEnabled(true);
        } 
    }//GEN-LAST:event_jtfNombreKeyReleased

    private void jtfDNIKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfDNIKeyReleased
        // TODO add your handling code here:
        int dni = Integer.parseInt(jtfDNI.getText());
        
        if(actualizando && alum != null){
            if(alum.getDni() == dni) {
                jbActualizar.setEnabled(false);
            }
            if(alum.getDni() != dni){
                jbActualizar.setEnabled(true);
            } 
        }
    }//GEN-LAST:event_jtfDNIKeyReleased

    private void jtfApellidoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfApellidoKeyReleased
        // TODO add your handling code here:
        String apellido = jtfApellido.getText();
        
        if(actualizando && alum.getApellido().equals(apellido)) {
            jbActualizar.setEnabled(false);
        }
        if(actualizando && !alum.getApellido().equals(apellido)){
            jbActualizar.setEnabled(true);
        } 
    }//GEN-LAST:event_jtfApellidoKeyReleased

    private void jtfIDKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfIDKeyTyped
        // TODO add your handling code here:
        jbBuscar.setEnabled(true);
        char id = evt.getKeyChar();
        validarNumeros(id, evt);
        jtfID.requestFocus();

        if (jtfID.getText().length() >= 5) {
            JOptionPane.showMessageDialog(this, "5 digitos permitidos", "Warning", JOptionPane.WARNING_MESSAGE);
            evt.consume();
            jtfID.requestFocus();
        }
    }//GEN-LAST:event_jtfIDKeyTyped

    private void jdcCalendarioPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jdcCalendarioPropertyChange
        // TODO add your handling code here:
       
        Date fechaDate = jdcCalendario.getDate();
        LocalDate fecha;
        if(fechaDate != null){
            fecha = fechaDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            
            if(actualizando && alum.getFechaNacimiento().equals(fecha)) {
                jbActualizar.setEnabled(false);
            }
            if(actualizando && !alum.getFechaNacimiento().equals(fecha)){
                jbActualizar.setEnabled(true);
            } 
        }
    }//GEN-LAST:event_jdcCalendarioPropertyChange

    private void jrbActivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbActivoActionPerformed
        // TODO add your handling code here:
        if(actualizando && alum.getEstado()){
            jbActualizar.setEnabled(false);
        }
        if(actualizando && !alum.getEstado()){
            jbActualizar.setEnabled(true);
        }
    }//GEN-LAST:event_jrbActivoActionPerformed

    private void jrbInactivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbInactivoActionPerformed
        // TODO add your handling code here:
        if(actualizando && !alum.getEstado()){
            jbActualizar.setEnabled(false);
        }
        if(actualizando && alum.getEstado()){
            jbActualizar.setEnabled(true);
        }
    }//GEN-LAST:event_jrbInactivoActionPerformed

    private void jtfDNIKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfDNIKeyTyped
        // TODO add your handling code here:
        if(!actualizando){
            jbGuardar.setEnabled(true);
        }
        char dni = evt.getKeyChar();
        validarNumeros(dni, evt);
        
        if (jtfDNI.getText().length() >= 10) {
            evt.consume();
            JOptionPane.showMessageDialog(this, "10 digitos permitidos para el campo 'nombre' ", "Warning", JOptionPane.WARNING_MESSAGE);
            jtfDNI.requestFocus();
        }
    }//GEN-LAST:event_jtfDNIKeyTyped

    private void jtfNombreKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfNombreKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        validarLetras(c, evt);
    }//GEN-LAST:event_jtfNombreKeyTyped

    private void jtfApellidoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtfApellidoKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();
        validarLetras(c, evt);
    }//GEN-LAST:event_jtfApellidoKeyTyped


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup estados;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabelID;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbActualizar;
    private javax.swing.JButton jbBorrar;
    private javax.swing.JButton jbBuscar;
    private javax.swing.JButton jbGuardar;
    private javax.swing.JButton jbLimpiar;
    private com.toedter.calendar.JDateChooser jdcCalendario;
    private javax.swing.JPanel jpFormulario;
    private javax.swing.JRadioButton jrbActivo;
    private javax.swing.JRadioButton jrbInactivo;
    private javax.swing.JTable jtAlumnos;
    private javax.swing.JTextField jtfApellido;
    private javax.swing.JTextField jtfDNI;
    private javax.swing.JTextField jtfID;
    private javax.swing.JTextField jtfNombre;
    // End of variables declaration//GEN-END:variables

   

}
